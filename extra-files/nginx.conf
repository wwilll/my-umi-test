
#user  nobody;
worker_processes  1; #并发量设置

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

## 以上为全局块儿设置内容。主要设置一些影响整体运行的指令

events {
    worker_connections  1024; #work process 最大支持连接数
}

## 以上为第二部分events块儿，主要影响用户网络连接：比如是否允许多个网络连接，多个work process
## 以及每个work process支持的最大连接数

## 以下为http块儿和server块儿

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #负载均衡配置
    #方式  1轮询：按时间分配 2按weight权重分配 3ip_hash  4fair 第三方方式，按后端服务器响应时间来分配，时间段则优先
    upstream myserver {
        ip_hash;  #第一次访问后就不再改变，解决session共享问题
        server   192.168.100.1:8081  weight=5;  #weight为权重
        server   192.168.100.1:8082  weight=10;
        # fair;
    }
    server {
        listen       80;
        server_name  192.168.100.1;
        #静态资源分离
        location /www/ {  #路径www
            root /data/;  #data目录下
            index index.html index.htm;
            autoindex on;
        }
        location /image/ {  #路径image
            root /data/;  #data目录下
            autoindex on; #列出访问目录
        }
        location / {
            proxy_pass  http://myserver;
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        listen        4001;
        server_name   localhost;

        location ~ \. {
            root D:/my-umi-test/dist/;
            index index.html;
        }

        location / {
            root D:/my-umi-test/dist/;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
